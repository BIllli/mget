{"name":"Mget","tagline":"Multithreaded metalink/file/website downloader (like Wget) and C library ","body":"Mget - multithreaded metalink / file / website downloader / spider and library\r\n==============================================================================\r\n\r\nThis is a multithreaded Wget-like tool and library written in C.\r\n\r\nDesigned and written from scratch it requires a C99 and Posix compliant\r\ndevelopment environment.\r\n\r\nIncluded is the stand-alone library libmget which provides an interface\r\nto many useful functions used by Mget.\r\n\r\nThe originally purpose was to help out on Wget2 development (refactoring,\r\nmodern and clean code, new technology, new design).\r\n\r\nIn many cases Mget downloads much faster than Wget1.14 due to HTTP zlib\r\ncompression, parallel connections and use of If-Modified-Since HTTP header.\r\n\r\nIt consumes less system and user CPU cycles due to larger buffers and\r\nbuffer recycling.\r\n\r\nLicense\r\n-------\r\n\r\nMget is licensed under GPLv3+.<br>\r\nLibmget is licensed under LGPLv3+.\r\n\r\nMailing List\r\n------------\r\n\r\nTo join the mailing list send an email to\r\n\r\n<mget-bugs+subscribe@googlegroups.com>\r\n\r\nand follow the instructions provided by the answer mail.\r\n\r\n\r\nDevelopment Status\r\n------------------\r\n\r\nMget has already many features that go beyond what Wget provides.<br>\r\n\r\nAn incomplete list of implemented features:\r\n\r\n- Support for bzip2 Content-Encoding / Accept-Encoding compression type\r\n- New Year gimmick: added support for XZ Content-Encoding / Accept-Encoding compression type\r\n- Character encoding of input files may be specified despite from local and remote encoding (--input-encoding)\r\n- Support scanning RSS 2.0 feeds from local files (--force-rss -i <filename>)\r\n- Support scanning RSS 2.0 feeds.\r\n- Support scanning Atom 1.0 feeds from local files (--force-atom -i <filename>)\r\n- Support scanning Atom 1.0 feeds.\r\n- Support scanning URLs from local Sitemap XML file (--force-sitemap -i <filename>)\r\n- Support scanning sitemap files given in robots.txt (Sitemap XML, gzipped Sitemap XML, plain text) including\r\nsitemap index files.\r\n- Support arbitrary number of proxies for parallel downloads\r\n- Multithreaded download of single files (option --chunk-size)\r\n- Internationalized Domain Names in Applications (compile-selectable IDNA2008 or IDNA2003)\r\n- ICEcast / SHOUTcast support via library (see examples/getstream.c)\r\n- respect /robots.txt \"Robot Exclusion Standard\" and `<META name=\"robots\" ...>`\r\n- new option --secure-protocol=PFS to have TLS only plus forcing Perfect Forward Secrecy (PFS)\r\n- use TCP Fast Open if available\r\n- IDN support for international domains\r\n- autotools support\r\n- proxy support\r\n- cookies (session/non-session), detection of supercookies via Mozilla Public Suffix List\r\n  (use the new option --cookie-suffixes <filename>, better: put it into ~/.mgetrc)\r\n- respect cookie public suffix list (http://publicsuffix.org/list/)\r\n- recursive download of websites with or without spanning hosts\r\n- download of single web pages / resources\r\n- zlib/gzip compressed HTTP/HTTPS downloads (gzip, deflate)\r\n- number of parallel download threads is adjustable\r\n- include directive for config files (wildcards allowed)\r\n- support for keep-alive connections\r\n- included CSS, HTML, XML parser needed for recursive downloads\r\n- gettext support\r\n- HTTPS via libgnutls\r\n- support for Metalink RFC 6249 (Metalink/HTTP: Mirrors and Hashes)\r\n- support for Metalink RFC 5854 (Metalink Download Description Format / .meta4 files)\r\n- support for Metalink 3\r\n- Metalink checksumming via libgnutls\r\n- DNS lookup cache\r\n- IPv4 and IPv6 support\r\n- tested on Debian SID amd64 and OpenBSD 5.0\r\n- compiled and tested with gcc (4.7.1 upto 4.8.2) and clang (3.1.1 upto 3.4)\r\n- tested regularly with static analysis tools\r\n- compiled and linked with hardening options proposed by the Debian project\r\n\r\nAnybody should feel free to contribute ideas, opinions, knowledge, code, tests, etc.\r\n\r\nNot yet implemented\r\n-------------------\r\n\r\nThe following is just a quick list of ideas and todos.<br>\r\nThe mid-range goal is to come as close to Wget, that Wget's units test work for Mget.\r\n\r\nSome ideas of what could be done next (but contact me before you start bigger changes!):\r\n\r\n- use [gtk-doc-tools](http://developer.gnome.org/gtk-doc-manual/unstable/settingup.html.en) for documentation.<br>\r\n  I want the docs stay with the code: already tested Doxygen, but the man page support seems broken/orphaned.\r\n- http authentication (basic & digest RFC 2617) [done and working, but some optimizing needed]\r\n- WARC support\r\n- RFC 6797 HSTS (HTTP Strict Transport Security)\r\n  [Chromium HSTS domain list](https://src.chromium.org/viewvc/chrome/trunk/src/net/base/transport_security_state_static.json)\r\n- read credentials from secure wallets (e.g. kwallet, firefox, http://sourceforge.net/projects/passwordsafe/)\r\n- HTTP request pipelining\r\n- SPDY / HTTP2.0 protocol\r\n- respect data-urls\r\n- Streaming (.m3u, etc. formats)\r\n- ftp support\r\n- https with openssl\r\n- a progress display\r\n- Documentation docbook with free Serna WYSIWYG/WYMIWYG editor (conversion to texinfo possible)\r\n  and/or with doxygen (API docs embedded into source code)\r\n- plugin technology to plug in user-specific code\r\n\r\n\r\nRequirements\r\n------------\r\n\r\nThe following packages are needed to build Mget:\r\n\r\n* autotools (autoconf, autogen, automake, autopoint, libtool)\r\n* gtk-doc-tools (when creating the HTML documentation)\r\n* xsltproc (when creating man pages)\r\n* gettext >= 0.18.1\r\n* libz >= 1.2.3 (the distribution may call the package zlib*, eg. zlib1g on Debian)\r\n* liblzma >= 5.1.1alpha (optional, if you need LZMA decompression)\r\n* libbz2 >= 1.0.6 (optional, if you need BZIP2 decompression)\r\n* libgnutls >= 2.4.2\r\n* libidn2 >= 0.9 + libunistring >= 0.9.3 (libidn >= 1.25 if you don't have libidn2)\r\n* flex >= 2.5.35\r\n\r\nThe versions are recommended, but older versions are supposed to work.\r\n\r\n\r\nBuilding from git\r\n-----------------\r\n\r\nDownload project and prepare sources with\r\n\r\n\t\tgit clone http://github.com/rockdaboot/mget\r\n\t\t./autogen.sh\r\n\r\nBuild Mget with\r\n\r\n\t\t./configure\r\n\t\tmake\r\n\r\nTest the functionality (sorry, right now under heavy development)\r\n\r\n\t\tmake check\r\n\r\nInstall Mget and libmget\r\n\r\n\t\tsudo make install (or su -c \"make install\")\r\n\r\nTo create Mget HTML documentation\r\n\r\n\t\t./configure --enable-gtk-doc\r\n\t\tmake\r\n\r\nTo create Mget HTML documentation and man pages (not functional right now)\r\n\r\n\t\t./configure --enable-gtk-doc --enable-man\r\n\t\tmake\r\n\r\nDocumentation\r\n-------------\r\n\r\nThere is no own documentation yet, but Mget aims to be Wget1.14 compatible.\r\n\r\n\t\tmget --help\r\n\r\nprints the usage and the current set of integrated options.\r\nFor more info, see the man pages of Wget.\r\n\r\nMy idea is to use the free Serna WYSIWYG/WYMIWYG editor for documentation.\r\nIt creates docbook format which can be converted into texinfo format.\r\nAnd it opens the documentation process to almost any volunteers without\r\ntexinfo knowledge.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}